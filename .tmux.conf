# This is a configuration file for tmux.

# stop delay in vim when using esc key
set -sg escape-time 0

# if run as "tmux attach", create a session if one does not already exist
# new-session -n $HOST

# set status bar from vim-tmuxline (change .tmuxline file by changing airline in vim, then run :TmuxlineSnapshot [filename])
if-shell "test -f /home/skinge/.tmuxline" "source-file /home/skinge/.tmuxline"
# currently moved to the end to test for better behaviour on first startup (does not fully work atm)

# update multiple tmux instances
#setw -g monitor-activity on
#set -g visual-activity on

# colors
set -g default-terminal "screen-256color"
#set -g default-terminal "xterm-256color"

# highlight current window
set-window-option -g window-status-current-bg colour9

# window and pane numbers from 1 instead of 0
set -g base-index 1
set -g pane-base-index 1

# change title of terminal program
set -g set-titles on
set -g set-titles-string "#S - #I:#W - #P:#T"

# message bar
set -g message-attr bright
set -g message-bg black
set -g message-fg green
set -g display-time 2000
set -g display-panes-time 2000

# window mode bar
setw -g mode-bg white
setw -g mode-fg black

# status bar
#set -g status-bg '#555555'
#set -g status-fg white
#set -g status-interval 10
#set -g status-left-length 50
#set -g status-left ''
#set -g status-right "#[fg=green][#I:#P #W] {#[bold,fg=cyan]%a %m/%d %H:%M%p#[nobold,fg=default]}"

# terminal title bar
#set -g set-titles-string "#I:#P - #W - #T"

# remove errors with function keys in vim
setw -g xterm-keys on


#### KEYBINDINGS ####

# use vim keys
set -gw mode-keys vi
# also use vi keys in command line editing
set -gw status-keys vi

# clock opens in new pane on left side
bind-key T split-window -h\; resize-pane -x 32\; clock-mode\; select-pane -L

# set tmux prefix to alt-space
set -g prefix C-A
unbind-key C-B
bind-key C-A send-prefix
#set -g prefix M-H
#unbind-key C-B
#bind-key M-H send-prefix

#bind-key-key j command-prompt -p "join pane from window:" "join-pane -s '%%'"
#bind-key-key s command-prompt -p "send pane to window:" "join-pane -t '%%'"

# new window
# bind-key c new-window
bind-key n new-window
bind-key N new-window -c "#{pane_current_path}"
bind-key M-n new-window

# change window (u and p fit better to "natural" directions due to their location on keyboard)
bind-key p next-window
bind-key u previous-window
#bind-key ä last-window

bind-key R command-prompt -p "rename session to" "rename-session '%%'"

# split new panes
unbind-key %
bind-key | split-window -h
bind-key y split-window -h
bind-key Y split-window -h -c "#{pane_current_path}"
bind-key - split-window -v
bind-key _ split-window -v -c "#{pane_current_path}"

###### using config below instead #############
## pane movement
#bind-key -r j select-pane -D
#bind-key -r k select-pane -U
#bind-key -r h select-pane -L
#bind-key -r l select-pane -R
#bind-key Q command-prompt -p "specify pane to focus" "select-pane %%"

## pane resize
#bind-key -r C-j resize-pane -D 3
#bind-key -r C-k resize-pane -U 3
#bind-key -r C-h resize-pane -L 3
#bind-key -r C-l resize-pane -R 3

##### moving around ############
#Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
#bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# restore <C-L> to clear (needs prefix now)
bind C-l send-keys 'C-l'
bind C-k send-keys 'C-k'
bind C-j send-keys 'C-j'
bind C-h send-keys 'C-h'

# pane resize
bind-key -r j resize-pane -D 3
bind-key -r k resize-pane -U 3
bind-key -r h resize-pane -L 3
bind-key -r l resize-pane -R 3

unbind-key '"'
# this does not work since %% is not expanded in second component of confirm-before (why?)
#bind-key K choose-session 'confirm-before -p "kill session %%? (y/n)" "kill-session -t %%"'
bind-key K choose-session "kill-session -t '%%'"
bind-key '"' send-keys "killtmuxsessions\n"
bind-key X confirm-before -p "kill session #S? (y/n)" kill-session
unbind-key '&'
bind-key W confirm-before -p "kill window #w? (y/n)" kill-window


# used in telegram
#bind-key S choose-list -l 🍪,🐅,😻,😘,✊,😊,😄,😜,😁,😉,😂,😳,😱,😋,😴,😎,😇,🙈,🐾,😢   "send-keys %%"


# remap % to last window (instead of l)
bind-key % last-window


# copy mode
# http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
# https://github.com/myfreeweb/dotfiles/blob/master/tmux.conf
unbind-key c
bind-key c copy-mode # enter copy mode; default [
bind-key -t vi-copy Escape cancel # exit copy mode; or hit q
bind-key P paste-buffer # paste; default ]
bind-key -t vi-copy v begin-selection # begin visual mode
bind-key -t vi-copy V select-line # visual line
bind-key -t vi-copy y copy-selection # yank
bind-key -t vi-copy r rectangle-toggle # visual block toggle

# read and write and delete paste buffer (xsel method)
# https://wiki.archlinux.org/index.php/Tmux#ICCCM_Selection_Integration
# ctrl+shift+v
bind-key < command-prompt -p "send to tmux:" "run-shell 'tmux set-buffer -- \"$(xsel -o -b)\"'"
bind-key > command-prompt -p "send to xsel:" "run-shell 'tmux show-buffer | xsel -i -b'"
bind-key + command-prompt "delete-buffer"

# move x clipboard into tmux paste buffer
bind C-p run "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer"
# move tmux copy buffer into x clipboard
bind C-y run "tmux save-buffer - | xclip -i"

# supposed to start new tmux session only if old one exists, but fails to work/nests multiple sessions
#if-shell 'tmux has-session -t 1' 'new-session -t 1' 'new-session -s 1'
# same same with 'error messages'
#if-shell 'tmux has-session -t 1' 'new-session -t 1 "echo existing; read"' 'new-session -s 1 "echo new; read"'

if-shell "test -f /home/skinge/.tmuxline" "source-file /home/skinge/.tmuxline"



# List of plugins
set -g @plugin 'tmux-plugins/tpm'

# show indicator in status line if prefix is pending
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @prefix_highlight_fg 'white'
set -g @prefix_highlight_bg 'green'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

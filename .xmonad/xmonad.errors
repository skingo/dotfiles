
xmonad.hs:70:17:
    Couldn't match type `xmonad-0.11:XMonad.Core.X ()' with `X ()'
    Expected type: String -> X ()
      Actual type: String -> xmonad-0.11:XMonad.Core.X ()
    In the return type of a call of `dzenConfig'
    In the first argument of `(.)', namely
      `dzenConfig (timeout 1 >=> centered)'
    In the expression:
      dzenConfig (timeout 1 >=> centered)
      . show . (round :: Double -> Integer)

xmonad.hs:77:20:
    Couldn't match type `xmonad-0.11:XMonad.Core.X ()' with `X ()'
    Expected type: String -> X ()
      Actual type: String -> xmonad-0.11:XMonad.Core.X ()
    In the return type of a call of `dzenConfig'
    In the first argument of `(.)', namely
      `dzenConfig (timeout 1 >=> centered)'
    In the expression: dzenConfig (timeout 1 >=> centered) . getState

xmonad.hs:97:27:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the return type of a call of `dzenConfig'
    In the expression: dzenConfig (timeout 1 >=> centered) s
    In an equation for `displayStringLine':
        displayStringLine s w h
          = dzenConfig (timeout 1 >=> centered) s
          where
              centered
                = onCurr (center w h)
                  >=>
                    font "-*-terminus-*-r-*-*-64-*-*-*-*-*-*-*"
                    >=> addArgs ["-fg", ....] >=> addArgs ["-fg", ....]

xmonad.hs:115:5:
    Couldn't match type `xmonad-0.11:XMonad.Core.Query' with `Query'
    Expected type: Query Bool
      Actual type: xmonad-0.11:XMonad.Core.Query Bool
    In the first argument of `(-->)', namely `isFullscreen'
    In the expression: isFullscreen --> doFullFloat
    In the first argument of `composeAll', namely
      `[isFullscreen --> doFullFloat,
        className =? "Firefox" --> doF (W.shift "web:1"), manageDocks,
        manageHook defaultConfig]'

xmonad.hs:115:22:
    Couldn't match type `xmonad-0.11:XMonad.Core.Query' with `Query'
    Expected type: Query (Data.Monoid.Endo WindowSet)
      Actual type: xmonad-0.11:XMonad.Core.ManageHook
    In the second argument of `(-->)', namely `doFullFloat'
    In the expression: isFullscreen --> doFullFloat
    In the first argument of `composeAll', namely
      `[isFullscreen --> doFullFloat,
        className =? "Firefox" --> doF (W.shift "web:1"), manageDocks,
        manageHook defaultConfig]'

xmonad.hs:118:7:
    Couldn't match type `xmonad-0.11:XMonad.Core.Query
                           (Data.Monoid.Endo xmonad-0.11:XMonad.Core.WindowSet)'
                  with `Query (Data.Monoid.Endo WindowSet)'
    Expected type: ManageHook
      Actual type: xmonad-0.11:XMonad.Core.ManageHook
    In the expression: manageDocks
    In the first argument of `composeAll', namely
      `[isFullscreen --> doFullFloat,
        className =? "Firefox" --> doF (W.shift "web:1"), manageDocks,
        manageHook defaultConfig]'
    In the expression:
      composeAll
        [isFullscreen --> doFullFloat,
         className =? "Firefox" --> doF (W.shift "web:1"), manageDocks,
         manageHook defaultConfig]

xmonad.hs:125:20:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the return type of a call of `dynamicLogWithPP'
    In the expression:
      dynamicLogWithPP
        (xmobarPP
           {ppOutput = hPutStrLn xmproc,
            ppTitle = xmobarColor "green" "" . shorten 60})
    In an equation for `myLogHook':
        myLogHook xmproc
          = dynamicLogWithPP
              (xmobarPP
                 {ppOutput = hPutStrLn xmproc,
                  ppTitle = xmobarColor "green" "" . shorten 60})

xmonad.hs:223:41:
    Couldn't match type `xmonad-0.11:XMonad.Core.X' with `X'
    Expected type: X ()
      Actual type: xmonad-0.11:XMonad.Core.X ()
    In the first argument of `(>>)', namely `shiftToNext'
    In the expression: shiftToNext >> nextWS
    In the expression:
      ((modm .|. shiftMask, xK_l), shiftToNext >> nextWS)

xmonad.hs:224:45:
    Couldn't match type `xmonad-0.11:XMonad.Core.X' with `X'
    Expected type: X ()
      Actual type: xmonad-0.11:XMonad.Core.X ()
    In the second argument of `(>>)', namely `nextWS'
    In the expression: shiftToNext >> nextWS
    In the expression:
      ((modm .|. shiftMask, xK_l), shiftToNext >> nextWS)

xmonad.hs:225:41:
    Couldn't match type `xmonad-0.11:XMonad.Core.X' with `X'
    Expected type: X ()
      Actual type: xmonad-0.11:XMonad.Core.X ()
    In the first argument of `(>>)', namely `shiftToPrev'
    In the expression: shiftToPrev >> prevWS
    In the expression:
      ((modm .|. shiftMask, xK_h), shiftToPrev >> prevWS)

xmonad.hs:226:45:
    Couldn't match type `xmonad-0.11:XMonad.Core.X' with `X'
    Expected type: X ()
      Actual type: xmonad-0.11:XMonad.Core.X ()
    In the second argument of `(>>)', namely `prevWS'
    In the expression: shiftToPrev >> prevWS
    In the expression:
      ((modm .|. shiftMask, xK_h), shiftToPrev >> prevWS)

xmonad.hs:229:43:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the expression: nextWS
    In the expression: ((modm, xK_l), nextWS)
    In the expression:
      [((0, xF86XK_AudioMute), 
        spawn "amixer -D pulse sset Master toggle"
        >> getMuteChannels ["Master"]
        >>= displayMuteState),
       ((0, xF86XK_AudioLowerVolume), 
        speakersOn >> lowerVolume 4 >>= displayVolume),
       ((0, xF86XK_AudioRaiseVolume), 
        speakersOn >> raiseVolume 4 >>= displayVolume),
       ((modm, xF86XK_AudioRaiseVolume), 
        setVolume 100 >> return 100 >>= displayVolume),
       ....]

xmonad.hs:230:43:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the expression: prevWS
    In the expression: ((modm, xK_h), prevWS)
    In the expression:
      [((0, xF86XK_AudioMute), 
        spawn "amixer -D pulse sset Master toggle"
        >> getMuteChannels ["Master"]
        >>= displayMuteState),
       ((0, xF86XK_AudioLowerVolume), 
        speakersOn >> lowerVolume 4 >>= displayVolume),
       ((0, xF86XK_AudioRaiseVolume), 
        speakersOn >> raiseVolume 4 >>= displayVolume),
       ((modm, xF86XK_AudioRaiseVolume), 
        setVolume 100 >> return 100 >>= displayVolume),
       ....]

xmonad.hs:231:43:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the return type of a call of `currentTopicAction'
    In the expression: currentTopicAction myTopicConfig
    In the expression: ((modm, xK_a), currentTopicAction myTopicConfig)

xmonad.hs:235:43:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the return type of a call of `shellPrompt'
    In the expression: shellPrompt myXPConfig
    In the expression:
      ((modm .|. shiftMask, xK_w), shellPrompt myXPConfig)

xmonad.hs:236:43:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the return type of a call of `xmonadPrompt'
    In the expression: xmonadPrompt myXPConfig
    In the expression:
      ((modm .|. controlMask, xK_w), xmonadPrompt myXPConfig)

xmonad.hs:237:43:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the return type of a call of `goToSelected'
    In the expression: goToSelected defaultGSConfig
    In the expression: ((modm, xK_i), goToSelected defaultGSConfig)

xmonad.hs:255:47:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the return type of a call of `onGroup'
    In the expression: onGroup W.focusUp'
    In the expression:
      ((modm .|. controlMask, xK_period), onGroup W.focusUp')

xmonad.hs:255:55:
    Couldn't match type `W.Stack a0'
                  with `xmonad-0.11:XMonad.StackSet.Stack Window'
    Expected type: xmonad-0.11:XMonad.StackSet.Stack Window
                   -> xmonad-0.11:XMonad.StackSet.Stack Window
      Actual type: W.Stack a0 -> W.Stack a0
    In the first argument of `onGroup', namely W.focusUp'
    In the expression: onGroup W.focusUp'
    In the expression:
      ((modm .|. controlMask, xK_period), onGroup W.focusUp')

xmonad.hs:256:47:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the return type of a call of `onGroup'
    In the expression: onGroup W.focusDown'
    In the expression:
      ((modm .|. controlMask, xK_comma), onGroup W.focusDown')

xmonad.hs:256:55:
    Couldn't match type `W.Stack a1'
                  with `xmonad-0.11:XMonad.StackSet.Stack Window'
    Expected type: xmonad-0.11:XMonad.StackSet.Stack Window
                   -> xmonad-0.11:XMonad.StackSet.Stack Window
      Actual type: W.Stack a1 -> W.Stack a1
    In the first argument of `onGroup', namely W.focusDown'
    In the expression: onGroup W.focusDown'
    In the expression:
      ((modm .|. controlMask, xK_comma), onGroup W.focusDown')

xmonad.hs:258:26:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the expression: focusUp
    In the expression: ((modm, xK_k), focusUp)
    In the expression:
      [((0, xF86XK_AudioMute), 
        spawn "amixer -D pulse sset Master toggle"
        >> getMuteChannels ["Master"]
        >>= displayMuteState),
       ((0, xF86XK_AudioLowerVolume), 
        speakersOn >> lowerVolume 4 >>= displayVolume),
       ((0, xF86XK_AudioRaiseVolume), 
        speakersOn >> raiseVolume 4 >>= displayVolume),
       ((modm, xF86XK_AudioRaiseVolume), 
        setVolume 100 >> return 100 >>= displayVolume),
       ....]

xmonad.hs:259:26:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the expression: focusDown
    In the expression: ((modm, xK_j), focusDown)
    In the expression:
      [((0, xF86XK_AudioMute), 
        spawn "amixer -D pulse sset Master toggle"
        >> getMuteChannels ["Master"]
        >>= displayMuteState),
       ((0, xF86XK_AudioLowerVolume), 
        speakersOn >> lowerVolume 4 >>= displayVolume),
       ((0, xF86XK_AudioRaiseVolume), 
        speakersOn >> raiseVolume 4 >>= displayVolume),
       ((modm, xF86XK_AudioRaiseVolume), 
        setVolume 100 >> return 100 >>= displayVolume),
       ....]

xmonad.hs:261:39:
    Couldn't match type `xmonad-0.11:XMonad.Core.X ()' with `X ()'
    Expected type: [(String, X ())] -> X ()
      Actual type: [(String, xmonad-0.11:XMonad.Core.X ())]
                   -> xmonad-0.11:XMonad.Core.X ()
    In the second argument of `(>>=)', namely `runCommand'
    In the expression: commands >>= runCommand
    In the expression: ((modm, xK_c), commands >>= runCommand)

xmonad.hs:267:26:
    Couldn't match type `xmonad-0.11:XMonad.Core.X' with `X'
    Expected type: X [(String, xmonad-0.11:XMonad.Core.X ())]
      Actual type: xmonad-0.11:XMonad.Core.X
                     [(String, xmonad-0.11:XMonad.Core.X ())]
    In a stmt of a 'do' block: defCmds <- defaultCommands
    In the expression:
      do { defCmds <- defaultCommands;
           let cmds = ...;
           return $ cmds ++ defCmds }
    In an equation for `commands':
        commands
          = do { defCmds <- defaultCommands;
                 let cmds = ...;
                 return $ cmds ++ defCmds }

xmonad.hs:281:32:
    Couldn't match type `xmonad-0.11:XMonad.Core.X ()' with `X ()'
    Expected type: [([Char], X ())]
      Actual type: [(String, xmonad-0.11:XMonad.Core.X ())]
    In the second argument of `(++)', namely `defCmds'
    In the second argument of `($)', namely `cmds ++ defCmds'
    In a stmt of a 'do' block: return $ cmds ++ defCmds

xmonad.hs:312:8:
    Couldn't match type `xmonad-0.11:XMonad.Core.X ()' with `X ()'
    Expected type: Topic -> X ()
      Actual type: Topic -> xmonad-0.11:XMonad.Core.X ()
    In the return type of a call of `switchTopic'
    In the expression: switchTopic myTopicConfig
    In an equation for `goto': goto = switchTopic myTopicConfig

xmonad.hs:327:32:
    Couldn't match type `xmonad-0.11:XMonad.Core.X ()' with `X ()'
    Expected type: (String -> X ()) -> X ()
      Actual type: (String -> xmonad-0.11:XMonad.Core.X ())
                   -> xmonad-0.11:XMonad.Core.X ()
    In the return type of a call of `P.mkXPrompt'
    In the expression: P.mkXPrompt tprompt xpConfig topicComplFunct
    In an equation for `topicPrompt':
        topicPrompt tprompt xpConfig
          = P.mkXPrompt tprompt xpConfig topicComplFunct

xmonad.hs:359:9:
    Couldn't match expected type `X ()'
                with actual type `xmonad-0.11:XMonad.Core.X ()'
    In the return type of a call of `P.mkXPrompt'
    In a stmt of a 'do' block:
      P.mkXPrompt Mux c (getMuxCompletion templates) spawnMuxShell
    In the expression:
      do { let templates = ...;
           P.mkXPrompt Mux c (getMuxCompletion templates) spawnMuxShell }

xmonad.hs:359:56:
    Couldn't match type `X ()' with `xmonad-0.11:XMonad.Core.X ()'
    Expected type: String -> xmonad-0.11:XMonad.Core.X ()
      Actual type: String -> X ()
    In the fourth argument of `P.mkXPrompt', namely `spawnMuxShell'
    In a stmt of a 'do' block:
      P.mkXPrompt Mux c (getMuxCompletion templates) spawnMuxShell
    In the expression:
      do { let templates = ...;
           P.mkXPrompt Mux c (getMuxCompletion templates) spawnMuxShell }

xmonad.hs:394:27:
    Couldn't match expected type `xmonad-0.11:XMonad.Core.X ()'
                with actual type `X ()'
    In the return type of a call of `spawnMuxShell'
    In the expression: spawnMuxShell "xmonad"
    In the expression: ("xmonad:9", spawnMuxShell "xmonad")

xmonad.hs:403:14:
    Couldn't match type `xmonad-0.11:XMonad.Core.X' with `X'
    Expected type: X (Maybe Topic)
      Actual type: xmonad-0.11:XMonad.Core.X (Maybe Topic)
    In the return type of a call of `gridselect'
    In a stmt of a 'do' block:
      topic <- gridselect defaultGSConfig (zip myTopics myTopics)
    In the expression:
      do { topic <- gridselect defaultGSConfig (zip myTopics myTopics);
           case topic of {
             Just t -> switchTopic myTopicConfig t
             Nothing -> return () } }

xmonad.hs:405:21:
    Couldn't match type `xmonad-0.11:XMonad.Core.X' with `X'
    Expected type: X ()
      Actual type: xmonad-0.11:XMonad.Core.X ()
    In the return type of a call of `switchTopic'
    In the expression: switchTopic myTopicConfig t
    In a case alternative: Just t -> switchTopic myTopicConfig t

xmonad.hs:414:14:
    Couldn't match expected type `xmonad-0.11:XMonad.Core.XConfig a2'
                with actual type `XConfig
                                    (PerWorkspace Myvid (PerWorkspace MyTexLayout Mydef))'
    In the first argument of `additionalKeys', namely
      `defaultConfig
         {borderWidth = 4, workspaces = myTopics, terminal = myTerminal,
          modMask = mod4Mask, manageHook = myManageHooks,
          layoutHook = myLayoutHook, logHook = myLogHook xmproc}'
    In the second argument of `($)', namely
      `defaultConfig
         {borderWidth = 4, workspaces = myTopics, terminal = myTerminal,
          modMask = mod4Mask, manageHook = myManageHooks,
          layoutHook = myLayoutHook, logHook = myLogHook xmproc}
       `additionalKeys` additionalKeyMaps'
    In a stmt of a 'do' block:
      xmonad
      $ defaultConfig
          {borderWidth = 4, workspaces = myTopics, terminal = myTerminal,
           modMask = mod4Mask, manageHook = myManageHooks,
           layoutHook = myLayoutHook, logHook = myLogHook xmproc}
        `additionalKeys` additionalKeyMaps

xmonad.hs:414:14:
    Couldn't match expected type `XConfig l0'
                with actual type `xmonad-0.11:XMonad.Core.XConfig a2'
    In the second argument of `($)', namely
      `defaultConfig
         {borderWidth = 4, workspaces = myTopics, terminal = myTerminal,
          modMask = mod4Mask, manageHook = myManageHooks,
          layoutHook = myLayoutHook, logHook = myLogHook xmproc}
       `additionalKeys` additionalKeyMaps'
    In a stmt of a 'do' block:
      xmonad
      $ defaultConfig
          {borderWidth = 4, workspaces = myTopics, terminal = myTerminal,
           modMask = mod4Mask, manageHook = myManageHooks,
           layoutHook = myLayoutHook, logHook = myLogHook xmproc}
        `additionalKeys` additionalKeyMaps
    In the expression:
      do { checkTopicConfig myTopics myTopicConfig;
           xmproc <- spawnPipe "xmobar";
           xmonad
           $ defaultConfig
               {borderWidth = 4, workspaces = myTopics, terminal = myTerminal,
                modMask = mod4Mask, manageHook = myManageHooks,
                layoutHook = myLayoutHook, logHook = myLogHook xmproc}
             `additionalKeys` additionalKeyMaps }

xmonad.hs:431:8:
    Couldn't match type `X ()' with `xmonad-0.11:XMonad.Core.X ()'
    Expected type: [((ButtonMask, KeySym),
                     xmonad-0.11:XMonad.Core.X ())]
      Actual type: [((ButtonMask, KeySym), X ())]
    In the second argument of `additionalKeys', namely
      `additionalKeyMaps'
    In the second argument of `($)', namely
      `defaultConfig
         {borderWidth = 4, workspaces = myTopics, terminal = myTerminal,
          modMask = mod4Mask, manageHook = myManageHooks,
          layoutHook = myLayoutHook, logHook = myLogHook xmproc}
       `additionalKeys` additionalKeyMaps'
    In a stmt of a 'do' block:
      xmonad
      $ defaultConfig
          {borderWidth = 4, workspaces = myTopics, terminal = myTerminal,
           modMask = mod4Mask, manageHook = myManageHooks,
           layoutHook = myLayoutHook, logHook = myLogHook xmproc}
        `additionalKeys` additionalKeyMaps
